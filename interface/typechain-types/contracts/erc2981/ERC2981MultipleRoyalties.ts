/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ERC2981MultipleRoyaltiesInterface extends utils.Interface {
  functions: {
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "royaltyInfo" | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "AddRoyaltyInfo(uint256,address,uint16)": EventFragment;
    "ResetTokenRoyalty(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddRoyaltyInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetTokenRoyalty"): EventFragment;
}

export interface AddRoyaltyInfoEventObject {
  tokenId: BigNumber;
  receiver: string;
  feeNumerator: number;
}
export type AddRoyaltyInfoEvent = TypedEvent<
  [BigNumber, string, number],
  AddRoyaltyInfoEventObject
>;

export type AddRoyaltyInfoEventFilter = TypedEventFilter<AddRoyaltyInfoEvent>;

export interface ResetTokenRoyaltyEventObject {
  tokenId: BigNumber;
}
export type ResetTokenRoyaltyEvent = TypedEvent<
  [BigNumber],
  ResetTokenRoyaltyEventObject
>;

export type ResetTokenRoyaltyEventFilter =
  TypedEventFilter<ResetTokenRoyaltyEvent>;

export interface ERC2981MultipleRoyalties extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC2981MultipleRoyaltiesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  royaltyInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    salePrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddRoyaltyInfo(uint256,address,uint16)"(
      tokenId?: null,
      receiver?: null,
      feeNumerator?: null
    ): AddRoyaltyInfoEventFilter;
    AddRoyaltyInfo(
      tokenId?: null,
      receiver?: null,
      feeNumerator?: null
    ): AddRoyaltyInfoEventFilter;

    "ResetTokenRoyalty(uint256)"(tokenId?: null): ResetTokenRoyaltyEventFilter;
    ResetTokenRoyalty(tokenId?: null): ResetTokenRoyaltyEventFilter;
  };

  estimateGas: {
    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    royaltyInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      salePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
