/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ERC2981Mock,
  ERC2981MockInterface,
} from "../../../../contracts/erc2981/mock/ERC2981Mock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "feeNumerator",
        type: "uint16",
      },
    ],
    name: "AddRoyaltyInfo",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ResetTokenRoyalty",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "feeNumerator",
        type: "uint16",
      },
    ],
    name: "addRoyaltyInfo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "feeDenominator",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "resetTokenRoyalty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611099806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c578063180b0d7e1461008c5780632a55205a146100aa578063740f81a7146100db5780638a616bc0146100f7575b600080fd5b61007660048036038101906100719190610908565b610113565b6040516100839190610950565b60405180910390f35b61009461018d565b6040516100a19190610988565b60405180910390f35b6100c460048036038101906100bf91906109d9565b61019c565b6040516100d2929190610bc7565b60405180910390f35b6100f560048036038101906100f09190610c56565b6104a2565b005b610111600480360381019061010c9190610ca9565b6104b2565b005b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101865750610185826104be565b5b9050919050565b6000610197610528565b905090565b606080606080600080600088815260200190815260200160002080549050141561025d57600067ffffffffffffffff8111156101db576101da610cd6565b5b6040519080825280602002602001820160405280156102095781602001602082028036833780820191505090505b509150600067ffffffffffffffff81111561022757610226610cd6565b5b6040519080825280602002602001820160405280156102555781602001602082028036833780820191505090505b509050610493565b60008060008881526020019081526020016000208054905014610492576000808781526020019081526020016000208054905067ffffffffffffffff8111156102a9576102a8610cd6565b5b6040519080825280602002602001820160405280156102d75781602001602082028036833780820191505090505b5091506000808781526020019081526020016000208054905067ffffffffffffffff81111561030957610308610cd6565b5b6040519080825280602002602001820160405280156103375781602001602082028036833780820191505090505b50905060005b6000808881526020019081526020016000208054905081101561049057600080888152602001908152602001600020818154811061037e5761037d610d05565b5b9060005260206000200160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815181106103bf576103be610d05565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610401610528565b61ffff16600080898152602001908152602001600020828154811061042957610428610d05565b5b9060005260206000200160000160149054906101000a900461ffff1661ffff16876104549190610d63565b61045e9190610dec565b82828151811061047157610470610d05565b5b602002602001018181525050808061048890610e1d565b91505061033d565b505b5b81819350935050509250929050565b6104ad838383610532565b505050565b6104bb816107df565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000612710905090565b600081905060005b600080868152602001908152602001600020805490508110156105b757600080868152602001908152602001600020818154811061057b5761057a610d05565b5b9060005260206000200160000160149054906101000a900461ffff16826105a29190610e66565b915080806105af90610e1d565b91505061053a565b506105c0610528565b61ffff168261ffff16111561060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060190610efb565b60405180910390fd5b610612610528565b61ffff168161ffff16111561065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390610f67565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390610fd3565b60405180910390fd5b60008085815260200190815260200160002060405180604001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018461ffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548161ffff021916908361ffff16021790555050507fd94e199f189a0679c5c7d31b3e36b61173327af507fdccc566254180700c33f68484846040516107d193929190611011565b60405180910390a150505050565b60008082815260200190815260200160002060006107fd9190610837565b7f2d0c64cb223c165096aa5260f0c4f12caf09469f917f6139ff17e1795a01225d8160405161082c9190611048565b60405180910390a150565b50805460008255906000526020600020908101906108559190610858565b50565b5b808211156108a757600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549061ffff021916905550600101610859565b5090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6108e5816108b0565b81146108f057600080fd5b50565b600081359050610902816108dc565b92915050565b60006020828403121561091e5761091d6108ab565b5b600061092c848285016108f3565b91505092915050565b60008115159050919050565b61094a81610935565b82525050565b60006020820190506109656000830184610941565b92915050565b600061ffff82169050919050565b6109828161096b565b82525050565b600060208201905061099d6000830184610979565b92915050565b6000819050919050565b6109b6816109a3565b81146109c157600080fd5b50565b6000813590506109d3816109ad565b92915050565b600080604083850312156109f0576109ef6108ab565b5b60006109fe858286016109c4565b9250506020610a0f858286016109c4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7082610a45565b9050919050565b610a8081610a65565b82525050565b6000610a928383610a77565b60208301905092915050565b6000602082019050919050565b6000610ab682610a19565b610ac08185610a24565b9350610acb83610a35565b8060005b83811015610afc578151610ae38882610a86565b9750610aee83610a9e565b925050600181019050610acf565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b3e816109a3565b82525050565b6000610b508383610b35565b60208301905092915050565b6000602082019050919050565b6000610b7482610b09565b610b7e8185610b14565b9350610b8983610b25565b8060005b83811015610bba578151610ba18882610b44565b9750610bac83610b5c565b925050600181019050610b8d565b5085935050505092915050565b60006040820190508181036000830152610be18185610aab565b90508181036020830152610bf58184610b69565b90509392505050565b610c0781610a65565b8114610c1257600080fd5b50565b600081359050610c2481610bfe565b92915050565b610c338161096b565b8114610c3e57600080fd5b50565b600081359050610c5081610c2a565b92915050565b600080600060608486031215610c6f57610c6e6108ab565b5b6000610c7d868287016109c4565b9350506020610c8e86828701610c15565b9250506040610c9f86828701610c41565b9150509250925092565b600060208284031215610cbf57610cbe6108ab565b5b6000610ccd848285016109c4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6e826109a3565b9150610d79836109a3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610db257610db1610d34565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610df7826109a3565b9150610e02836109a3565b925082610e1257610e11610dbd565b5b828204905092915050565b6000610e28826109a3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e5b57610e5a610d34565b5b600182019050919050565b6000610e718261096b565b9150610e7c8361096b565b92508261ffff03821115610e9357610e92610d34565b5b828201905092915050565b600082825260208201905092915050565b7f455243323938313a206f7665722064656e6f6d696e61746f7200000000000000600082015250565b6000610ee5601983610e9e565b9150610ef082610eaf565b602082019050919050565b60006020820190508181036000830152610f1481610ed8565b9050919050565b7f455243323938313a206f76657220746f74616c20726f79616c74792066656500600082015250565b6000610f51601f83610e9e565b9150610f5c82610f1b565b602082019050919050565b60006020820190508181036000830152610f8081610f44565b9050919050565b7f455243323938313a20496e76616c696420706172616d65746572730000000000600082015250565b6000610fbd601b83610e9e565b9150610fc882610f87565b602082019050919050565b60006020820190508181036000830152610fec81610fb0565b9050919050565b610ffc816109a3565b82525050565b61100b81610a65565b82525050565b60006060820190506110266000830186610ff3565b6110336020830185611002565b6110406040830184610979565b949350505050565b600060208201905061105d6000830184610ff3565b9291505056fea2646970667358221220e2b7747d8dc66c56f4c55e6e65355e57888107725cf12a9704cdf011f77aea5664736f6c63430008090033";

type ERC2981MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC2981MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC2981Mock__factory extends ContractFactory {
  constructor(...args: ERC2981MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC2981Mock> {
    return super.deploy(overrides || {}) as Promise<ERC2981Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC2981Mock {
    return super.attach(address) as ERC2981Mock;
  }
  override connect(signer: Signer): ERC2981Mock__factory {
    return super.connect(signer) as ERC2981Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC2981MockInterface {
    return new utils.Interface(_abi) as ERC2981MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC2981Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC2981Mock;
  }
}
